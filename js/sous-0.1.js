//@ sourceMappingURL=sous-0.1.map
// Generated by CoffeeScript 1.6.1
(function() {
  var __slice = [].slice;

  (function($) {
    var getclasars, hide, methods, show, stateItemComp;
    stateItemComp = function(a, b) {
      if ((typeof a.data === "function" ? a.data("num") : void 0) && (typeof b.data === "function" ? b.data("num") : void 0)) {
        return a.data("num") - b.data("num");
      }
    };
    getclasars = function(classAttr, classNames) {
      var classList, el, res;
      if (classNames == null) {
        classNames = false;
      }
      el = this;
      classList = classAttr.split(/\s+/gi);
      res = [];
      $.each(classList, function(j, cls) {
        var clasAr, classRegExp;
        classRegExp = new RegExp("^" + (el.data("settings").classPref) + "(\\d+)?-(\\d+)?$", "g");
        clasAr = classRegExp.exec(cls);
        if (clasAr && (clasAr[1] || clasAr[2])) {
          if (!clasAr[1]) {
            clasAr[1] = 0;
          } else {
            clasAr[1] = parseInt(clasAr[1]);
          }
          if (!clasAr[2]) {
            clasAr[2] = Infinity;
          } else {
            clasAr[2] = parseInt(clasAr[2]);
          }
          if (classNames) {
            return res.push([clasAr[1], clasAr[2], cls]);
          } else {
            return res.push([clasAr[1], clasAr[2]]);
          }
        }
      });
      return res;
    };
    hide = function(it, immed) {
      var classIt, curNum, _i, _len, _ref, _results;
      if (immed == null) {
        immed = true;
      }
      it.hide();
      curNum = this.data('current');
      _ref = getclasars.apply(this, [it.attr("class"), true]);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classIt = _ref[_i];
        if (classIt[0] > curNum || curNum >= classIt[1]) {
          _results.push(this.data("settings").messageBox.find("." + classIt[2]).hide());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    show = function(it, immed) {
      var classIt, curNum, _i, _len, _ref, _results;
      if (immed == null) {
        immed = true;
      }
      it.show();
      curNum = this.data('current');
      _ref = getclasars.apply(this, [it.attr("class"), true]);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classIt = _ref[_i];
        if ((classIt[0] <= curNum && curNum < classIt[1])) {
          _results.push(this.data("settings").messageBox.find("." + classIt[2]).show());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    methods = {
      init: function(options) {
        var Ar, el, settings, spans, _i, _j, _len, _len1, _ref, _ref1, _results;
        settings = $.extend({
          'classPref': 'srcdemo',
          'messageBox': $(document.body)
        }, options);
        el = $(this);
        el.data('slides_on', []);
        el.data('slides_off', []);
        el.data('states', [[]]);
        el.data('allspans', []);
        el.data('settings', settings);
        el.data('current', 0);
        spans = el.find("span");
        $.each(spans, function(i, item) {
          var classList, spanItem;
          spanItem = $(item);
          spanItem.data("num", i);
          classList = getclasars.apply(el, [spanItem.attr("class")]);
          return $.each(classList, function(j, clasAr) {
            if (el.data('slides_on')[clasAr[0]] instanceof Array) {
              el.data('slides_on')[clasAr[0]].push(spanItem);
            } else {
              el.data('slides_on')[clasAr[0]] = [spanItem];
            }
            if (clasAr[0] !== 0) {
              hide.apply(el, [spanItem]);
            } else {
              el.data('states')[0].push(spanItem);
            }
            if (el.data('allspans').indexOf(spanItem) < 0) {
              el.data('allspans').push(spanItem);
            }
            if (clasAr[1] !== Infinity) {
              if (el.data('slides_off')[clasAr[1]] instanceof Array) {
                return el.data('slides_off')[clasAr[1]].push(spanItem);
              } else {
                return el.data('slides_off')[clasAr[1]] = [spanItem];
              }
            }
          });
        });
        el.data('states')[0].sort(stateItemComp);
        el.data('allspans').sort(stateItemComp);
        _ref = el.data('slides_on');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          Ar = _ref[_i];
          if (Ar instanceof Array) {
            Ar.sort(stateItemComp);
          }
        }
        _ref1 = el.data('slides_off');
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          Ar = _ref1[_j];
          if (Ar instanceof Array) {
            _results.push(Ar.sort(stateItemComp));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      next: function() {
        var curNum, el, i, it, state, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
        el = $(this);
        curNum = el.data('current');
        if (curNum < Math.max(el.data('slides_off').length, el.data('slides_on').length)) {
          el.data('current', curNum + 1);
          state = (_ref = el.data('states')[curNum + 1]) != null ? _ref : void 0;
          if (!state) {
            state = el.data('states')[curNum].slice();
            if (el.data('slides_off')[curNum + 1] instanceof Array) {
              _ref1 = el.data('slides_off')[curNum + 1];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                it = _ref1[_i];
                i = state.indexOf(it);
                if (i >= 0) {
                  state.splice(i, 1);
                }
              }
            }
            if (el.data('slides_on')[curNum + 1] instanceof Array) {
              _ref2 = el.data('slides_on')[curNum + 1];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                it = _ref2[_j];
                i = state.indexOf(it);
                if (i < 0) {
                  state.push(it);
                }
              }
            }
            state.sort(stateItemComp);
            el.data('states')[curNum + 1] = state;
          }
          _ref3 = el.data('allspans');
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            it = _ref3[_k];
            if (state.indexOf(it) >= 0) {
              if (it.is(":hidden")) {
                show.apply(el, [it]);
                it.addClass("just-showed");
              } else {
                it.removeClass("just-showed");
              }
            } else {
              if (!it.is(":hidden")) {
                hide.apply(el, [it]);
              }
            }
          }
          return el.trigger("changestate", curNum + 1);
        }
      },
      prev: function() {
        var curNum, el, it, state, statePre, _i, _len, _ref;
        el = $(this);
        curNum = el.data('current');
        if (curNum - 1 >= 0) {
          el.data('current', curNum - 1);
          state = el.data('states')[curNum - 1];
          statePre = el.data('states')[curNum - 2];
          _ref = el.data('allspans');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            it = _ref[_i];
            if (state.indexOf(it) >= 0) {
              if (it.is(":hidden")) {
                show.apply(el, [it]);
              }
              if (statePre.indexOf(it) < 0) {
                it.addClass("just-showed");
              } else {
                it.removeClass("just-showed");
              }
            } else {
              if (!it.is(":hidden")) {
                hide.apply(el, [it]);
              }
            }
          }
          return el.trigger("changestate", curNum - 1);
        }
      }
    };
    return $.fn.sourceDemo = function() {
      var ARGS, method;
      method = arguments[0], ARGS = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.each(function() {
        if (methods[method]) {
          return methods[method].apply(this, ARGS);
        } else if (typeof method === 'object' || !method) {
          return methods.init.apply(this, [method].concat(__slice.call(ARGS)));
        } else {
          return $.error("No method with name " + method);
        }
      });
    };
  })(jQuery);

}).call(this);
